name: Multiarch build
on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

env:
  IMAGE_TAG: latest
  IMAGE_NAME: test-multi-arch
  IMAGE_REGISTRY: quay.io
  IMAGE_NAMESPACE: mayurwaghmode111

jobs:
  build-multiplatform-containerfile:
    name: Build multi-platform image using Containerfile
    runs-on: ubuntu-20.04
    steps:
      - name: Install qemu dependency
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
      - name: Create Containerfile3
        run: |
          cat > Containerfile3<<EOF
          FROM docker.io/alpine:3.14
          RUN echo "hello world"
          ENTRYPOINT [ "sh", "-c", "echo -n 'Machine: ' && uname -m && echo -n 'Bits: ' && getconf LONG_BIT && echo 'goodbye world'" ]
          EOF
      - name: Build image linux/amd64
        run: buildah bud --platform linux/amd64 -f ./Containerfile3 --format docker -t ${{ env.IMAGE_NAME }}:linux-amd64

      - name: Build image linux/ppc64le
        run: buildah bud --platform linux/ppc64le -f ./Containerfile3 --format docker -t ${{ env.IMAGE_NAME }}:linux-ppc64le

      - name: Check images created
        run: buildah images | grep '${{ env.IMAGE_NAME }}'

      - name: Check image metadata
        run: |
          set -x
          buildah inspect ${{ env.IMAGE_NAME }}:linux-amd64 | jq ".OCIv1.architecture"
          buildah inspect ${{ env.IMAGE_NAME }}:linux-amd64 | jq ".Docker.architecture"
          buildah inspect ${{ env.IMAGE_NAME }}:linux-ppc64le | jq ".OCIv1.architecture"
          buildah inspect ${{ env.IMAGE_NAME }}:linux-ppc64le | jq ".Docker.architecture"
      - name: Create and add to manifest
        run: |
          buildah manifest create ${{ env.IMAGE_NAME }}
          buildah manifest add ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:linux-amd64
          buildah manifest add ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:linux-ppc64le
      - name: Push manifest
        run: buildah manifest push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}  docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --creds ${{ secrets.QUAY_USER }}:${{ secrets.QUAY_PWD }} --all
